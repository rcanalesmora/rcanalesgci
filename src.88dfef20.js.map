{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"src.88dfef20.js","sourceRoot":"../src","sourcesContent":["export class JuegoDeLaVidaTDDBack {\n  matriz: number[][];\n  dim = { columnas: 0, filas: 0 };\n\n  constructor(columnas: number, filas: number) {\n    this.dim.columnas = columnas;\n    this.dim.filas = filas;\n\n    this.matriz = this.inicializaMatriz(columnas, filas, true);\n  }\n\n  setMatriz(matriz: number[][]) {\n    this.matriz = matriz;\n\n    this.dim.filas = matriz.length;\n    this.dim.columnas = matriz[0].length;\n  }\n\n  calculaVecinosVivos(columna: number, fila: number): number {\n    let filaInicio: number = fila;\n    let filaFin: number = fila;\n    let columnaInicio: number = columna;\n    let columnaFin: number = columna;\n\n    let contador: number = 0;\n\n    if (fila > 0) {\n      filaInicio--;\n    }\n    if (fila < this.dim.filas - 1) {\n      filaFin++;\n    }\n\n    if (columna > 0) {\n      columnaInicio--;\n    }\n    if (columna < this.dim.columnas - 1) {\n      columnaFin++;\n    }\n\n    for (let a = filaInicio; a <= filaFin; a++) {\n      for (let b = columnaInicio; b <= columnaFin; b++) {\n        if (fila == a && columna == b) {\n          // ignorar la propia casilla\n        } else {\n          contador += this.matriz[a][b];\n        }\n      }\n    }\n    return contador;\n  }\n\n  inicializaMatriz(\n    columnas: number,\n    filas: number,\n    aleatoria = true\n  ): Array<Array<number>> {\n    let matrizAux = new Array<Array<number>>();\n\n    for (let fila = 0; fila < filas; fila++) {\n      let filaArray: number[] = new Array<number>();\n\n      for (let columna = 0; columna < columnas; columna++) {\n        if (aleatoria == true) {\n          filaArray.push(Math.round(Math.random() * 2));\n        } else {\n          filaArray.push(0);\n        }\n      }\n\n      matrizAux.push(filaArray);\n    }\n\n    return matrizAux;\n  }\n\n  nuevaGeneracion() : Array<Array<number>>{\n    let matrizAux: number[][] = this.inicializaMatriz(\n      this.dim.columnas,\n      this.dim.filas,\n      false\n    );\n\n    for (let fila = 0; fila < this.dim.filas; fila++) {\n      for (let columna = 0; columna < this.dim.columnas; columna++) {\n        let vecinos: number = this.calculaVecinosVivos(columna, fila);\n\n        if (this.matriz[fila][columna] == 0 && vecinos == 3) {\n          matrizAux[fila][columna] = 1;\n        } else if (\n          this.matriz[fila][columna] == 1 &&\n          (vecinos == 2 || vecinos == 3)\n        ) {\n          matrizAux[fila][columna] = 1;\n        } else {\n          matrizAux[fila][columna] = 0;\n        }\n      }\n    }\n\n    return matrizAux;\n  }\n}\n\nexport class JuegoDeLaVidaTDDFront {\n  timer: any;\n\n  color: string = \"FFFFFF\";\n  tamaCuadrado: number = 5;\n  ctx: CanvasRenderingContext2D;\n  back: JuegoDeLaVidaTDDBack;\n\n  constructor(ctx: CanvasRenderingContext2D) {\n    this.ctx = ctx;\n\n    this.back = new JuegoDeLaVidaTDDBack(\n      this.ctx.canvas.width / this.tamaCuadrado,\n      this.ctx.canvas.height / this.tamaCuadrado\n    );\n  }\n\n  pintaCasilla(columna: number, fila: number, color: string) {\n    this.ctx.fillStyle = color;\n    this.ctx.fillRect(\n      columna * this.tamaCuadrado + 1,\n      fila * this.tamaCuadrado + 1,\n      this.tamaCuadrado - 2,\n      this.tamaCuadrado - 2\n    );\n  }\n\n  consigueNuevaGeneracion() {\n    this.back.matriz = this.back.nuevaGeneracion();\n  }\n\n  pinta() {\n    this.ctx.fillStyle = \"#FFFFFF\";\n    this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n\n    for (let fila = 0; fila < this.back.dim.filas; fila++) {\n      for (let columna = 0; columna < this.back.dim.columnas; columna++) {\n        if (this.back.matriz[fila][columna] == 0) {\n          this.color = \"#FFFFFF\";\n        } else if (this.back.matriz[fila][columna] == 1) {\n          this.color = \"#0000FF\";\n        }\n\n        this.pintaCasilla(fila, columna, this.color);\n      }\n    }\n  }\n\n  anima = () => {\n    console.log(\"Animamos el juego\");\n    this.consigueNuevaGeneracion();\n    this.pinta();\n  };\n}\n\nwindow.addEventListener(\"load\", main);\n\nfunction main() {\n  let juego: JuegoDeLaVidaTDDFront;\n\n  let micanvas: HTMLCanvasElement = document.getElementById(\n    \"areajuego\"\n  ) as HTMLCanvasElement;\n\n  let ctx: CanvasRenderingContext2D | null = micanvas.getContext(\"2d\");\n\n  if (ctx == null) {\n    console.log(\"Imposible recuperar contexto pintado\");\n    return;\n  }\n\n  juego = new JuegoDeLaVidaTDDFront(ctx);\n  juego.timer = setInterval(juego.anima, 100);\n}\n"]}